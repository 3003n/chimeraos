name: Build ChimeraOS image
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

on:
  workflow_call:
    inputs:
      postfix:
        type: string
        description: Postfix used in release.
        default: ''

jobs:
  build-system-image:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ steps.build_image.outputs.version }}
      display_name: ${{ steps.build_image.outputs.display_name }}
      display_version: ${{ steps.build_image.outputs.display_version }}
      image_filename: ${{ steps.build_image.outputs.image_filename }}
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed,
          # if set to "true" but frees about 6 GB
          tool-cache: false
          
          # all of these default to true, but feel free to set to
          # "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true
      # - name: Maximize build space
      #   run: |
      #     df -h
      #     sudo rm -rf /usr/share/dotnet
      #     sudo rm -rf /usr/share/swift
      #     sudo rm -rf /usr/share/java
      #     sudo rm -rf /usr/local/lib/android
      #     sudo rm -rf /opt/ghc
      #     sudo rm -rf /opt/hostedtoolcache
      #     sudo rm -rf /opt/az
      #     df -h

      - uses: actions/checkout@v4
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - uses: actions/download-artifact@v4
        with:
            pattern: AUR-packages*
            merge-multiple: true
            path: aur-pkgs/
      - uses: actions/download-artifact@v4
        with:
            pattern: Packages*
            merge-multiple: true
            path: pkgs/
      - name: Verify checksums
        id: verify_checksums
        run: |
          echo "Verifying package checksums..."
          failed_aur_packages=""
          failed_packages=""
          
          cd aur-pkgs
          for checksum in sha256sums-*.txt; do
            if [ -f "$checksum" ]; then
              echo "Verifying $checksum"
              if ! sha256sum -c "$checksum"; then
                pkg_name=$(echo "$checksum" | sed 's/sha256sums-\(.*\)\.txt/\1/')
                if [ -z "$failed_aur_packages" ]; then
                  failed_aur_packages="AUR-packages-$pkg_name"
                else
                  failed_aur_packages="$failed_aur_packages,AUR-packages-$pkg_name"
                fi
                echo "Warning: AUR package checksum verification failed for $pkg_name"
              fi
            fi
            echo "------------------------------"
          done
          
          cd ../pkgs
          for checksum in sha256sums-*.txt; do
            if [ -f "$checksum" ]; then
              echo "Verifying $checksum"
              if ! sha256sum -c "$checksum"; then
                pkg_name=$(echo "$checksum" | sed 's/sha256sums-\(.*\)\.txt/\1/')
                if [ -z "$failed_packages" ]; then
                  failed_packages="Packages-$pkg_name"
                else
                  failed_packages="$failed_packages,Packages-$pkg_name"
                fi
                echo "Warning: Package checksum verification failed for $pkg_name"
              fi
            fi
            echo "------------------------------"
          done
          cd ..
          
          if [ -n "$failed_aur_packages" ] || [ -n "$failed_packages" ]; then
            echo "Failed AUR packages: $failed_aur_packages"
            echo "Failed packages: $failed_packages"
            echo "failed_aur_packages={$failed_aur_packages}" >> $GITHUB_OUTPUT
            echo "failed_packages={$failed_packages}" >> $GITHUB_OUTPUT
            exit 0  # 不立即失败，继续执行重新下载步骤
          else
            echo "All package checksums verified successfully"
          fi

      - name: Redownload failed AUR packages
        if: steps.verify_checksums.outputs.failed_aur_packages != ''
        uses: actions/download-artifact@v4
        with:
            pattern: ${{ steps.verify_checksums.outputs.failed_aur_packages }}
            merge-multiple: true
            path: aur-pkgs/

      - name: Redownload failed normal packages
        if: steps.verify_checksums.outputs.failed_packages != ''
        uses: actions/download-artifact@v4
        with:
            pattern: ${{ steps.verify_checksums.outputs.failed_packages }}
            merge-multiple: true
            path: pkgs/

      - name: Re-verify packages
        if: steps.verify_checksums.outputs.failed_aur_packages != '' || steps.verify_checksums.outputs.failed_packages != ''
        run: |
          echo "Re-verifying all packages..."
          cd aur-pkgs
          for checksum in sha256sums-*.txt; do
            if [ -f "$checksum" ]; then
              echo "Re-verifying $checksum"
              if ! sha256sum -c "$checksum"; then
                echo "Error: Package still failed after redownload: $checksum"
                exit 1
              fi
            fi
          done
          
          cd ../pkgs
          for checksum in sha256sums-*.txt; do
            if [ -f "$checksum" ]; then
              echo "Re-verifying $checksum"
              if ! sha256sum -c "$checksum"; then
                echo "Error: Package still failed after redownload: $checksum"
                exit 1
              fi
            fi
          done
          cd ..
          echo "All packages verified successfully after redownload"

      - name: Check package integrity
        run: |
          echo "Checking package integrity..."
          for pkg in aur-pkgs/*.pkg.tar*; do
            if ! tar -tf "$pkg" >/dev/null 2>&1; then
              echo "Error: AUR package file may be corrupted: $pkg"
              exit 1
            fi
          done
          for pkg in pkgs/*.pkg.tar*; do
            if ! tar -tf "$pkg" >/dev/null 2>&1; then
              echo "Error: Package file may be corrupted: $pkg"
              exit 1
            fi
          done
          echo "All package files check passed"
      - name: Build system image
        id: build_image
        run: |
          docker pull ${{ steps.meta.outputs.tags }}
          docker run -u root --rm --entrypoint=/workdir/build-image.sh -v $(pwd):/workdir -v $(pwd)/output:/output -v $GITHUB_OUTPUT:$GITHUB_OUTPUT -e "GITHUB_OUTPUT=$GITHUB_OUTPUT" --privileged=true ${{ steps.meta.outputs.tags }} $(echo ${GITHUB_SHA} | cut -c1-7)
          echo -e "$(docker inspect --format='{{index .RepoDigests 0}}' ${{ steps.meta.outputs.tags }})" > output/container.txt
      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ steps.build_image.outputs.version }}
          target_commitish: ${{ github.sha }}
          name: ${{ steps.build_image.outputs.display_name }} ${{ steps.build_image.outputs.display_version }} ${{ inputs.postfix }}
          draft: false
          prerelease: true
          fail_on_unmatched_files: true
          files: |
            output/${{ steps.build_image.outputs.image_filename_without_ext }}*img*
            output/build_info.txt
            output/sha256sum*.txt
            output/container.txt