From 653a173a674374e1e7b6eed0a04b8f5051736366 Mon Sep 17 00:00:00 2001
From: honjow <honjow311@gmail.com>
Date: Tue, 22 Apr 2025 21:08:58 +0800
Subject: [PATCH] fix(ryzenadj): add error handling for refresh failures in
 limit retrieval functions

---
 src/performance/gpu/amd/ryzenadj.rs | 17 +++++++++++++++++
 1 file changed, 17 insertions(+)

diff --git a/src/performance/gpu/amd/ryzenadj.rs b/src/performance/gpu/amd/ryzenadj.rs
index b0c036b..2513f9f 100644
--- a/src/performance/gpu/amd/ryzenadj.rs
+++ b/src/performance/gpu/amd/ryzenadj.rs
@@ -79,6 +79,11 @@ impl RyzenAdjTdp {
     // Get the PPT slow limit
     fn get_ppt_limit_slow(&self) -> Result<f32, String> {
         log::debug!("Getting ppt slow limit");
+        
+        if let Err(e) = self.ryzenadj.refresh() {
+            log::error!("Failed to refresh ryzenadj: {}", e);
+        }
+
         match self.ryzenadj.get_slow_limit() {
             Ok(x) => Ok(x),
             Err(e) => {
@@ -118,6 +123,10 @@ impl RyzenAdjTdp {
             return Ok(self.unsupported_ppt_limit_fast);
         }
 
+        if let Err(e) = self.ryzenadj.refresh() {
+            log::error!("Failed to refresh ryzenadj: {}", e);
+        }
+
         // Get the fast limit from ryzenadj
         match self.ryzenadj.get_fast_limit() {
             Ok(x) => {
@@ -162,6 +171,10 @@ impl RyzenAdjTdp {
             return Ok(self.unsupported_stapm_limit);
         }
 
+        if let Err(e) = self.ryzenadj.refresh() {
+            log::error!("Failed to refresh ryzenadj: {}", e);
+        }
+
         // Get the value from ryzenadj
         match self.ryzenadj.get_stapm_limit() {
             Ok(x) => {
@@ -206,6 +219,10 @@ impl RyzenAdjTdp {
             return Ok(self.unsupported_thm_limit);
         }
 
+        if let Err(e) = self.ryzenadj.refresh() {
+            log::error!("Failed to refresh ryzenadj: {}", e);
+        }
+
         // Get the value from ryzenadj
         match self.ryzenadj.get_tctl_temp() {
             Ok(x) => Ok(x),
-- 
2.39.1

