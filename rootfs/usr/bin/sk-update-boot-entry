#!/bin/bash

# Check if the script is running with root or sudo privileges
if [ "$EUID" -ne 0 ]; then
    echo "This script must be run as root or with sudo."
    exit 1
fi

echo "start frzr-unlock"
frzr-unlock

echo $(ls /boot/)
echo $(ls /frzr_root/deployments)

service_status=$(systemctl is-enabled update_boot_config.service 2>/dev/null)
if [[ "$service_status" == "enabled" ]]; then
    echo "update_boot_config.service is enabled, disabling"
    sudo systemctl disable --now update_boot_config.service
fi

# swap uuid
swap_dev=$(awk '$2 == "partition" && $1 ~ "^/dev/" {print $1}' /proc/swaps)
if [[ -n "$swap_dev" ]]; then
  SWAP_PARTUUID=$(lsblk -no PARTUUID -f "$swap_dev")
fi
echo "SWAP_PARTUUID=$SWAP_PARTUUID"

# swap file
root_partuuid=$(lsblk -no PARTUUID $(mount | grep ' / ' | cut -d' ' -f1))
if [ -f "/frzr_root/swap/swapfile" ]; then
    RESUME_OFFSET=$(btrfs inspect-internal map-swapfile -r /frzr_root/swap/swapfile)
fi


if [ -d /tmp/frzr_root ]; then
  source ${MOUNT_PATH}/etc/sk-chos/sk-chos.conf
else
  source /etc/sk-chos/sk-chos.conf
fi

RESUME_CMD=""
if [[ -n "${SWAP_PARTUUID}" ]]; then
    echo "SWAP_PARTUUID 非空，添加到内核参数"
    RESUME_CMD="resume=PARTUUID=${SWAP_PARTUUID}"

    systemctl disable --now swapfile.service
    systemctl disable --now frzr_root-swap-swapfile.swap

    rm -f /frzr_root/swap/swapfile 2>/dev/null

elif [[ -n "${RESUME_OFFSET}" ]]; then
    echo "RESUME_OFFSET 非空，添加到内核参数"
    RESUME_CMD="resume=PARTUUID=${root_partuuid} resume_offset=${RESUME_OFFSET}"
    
elif [[ "${SWAP_FILE}" == "1" ]]; then
    echo "SWAP_PARTUUID 和 RESUME_OFFSET 都为空，创建 swapfile"
    /usr/bin/sk-mkswapfile

    RESUME_OFFSET=$(btrfs inspect-internal map-swapfile -r /frzr_root/swap/swapfile)
    systemctl enable --now swapfile.service
    systemctl enable --now frzr_root-swap-swapfile.swap

    RESUME_CMD="resume=PARTUUID=${root_partuuid} resume_offset=${RESUME_OFFSET}"
fi

echo "RESUME_CMD=${RESUME_CMD}"


# 检查 /boot/loader/entries/frzr.conf 文件是否存在
if [ -f "/boot/loader/entries/frzr.conf" ]; then
    curr_sys=$(grep -o "title [^[:space:]]*" "/boot/loader/entries/frzr.conf"|sed "s/title //")

    # 检查文件中是否已存在 resume=，如果不存在，则添加
    if ! grep -q "resume=" "/boot/loader/entries/frzr.conf"; then

        sed -i "s/ splash / splash ${RESUME_CMD} /" "/boot/loader/entries/frzr.conf"
        echo "Added RESUME_CMD to frzr.conf"
    else
        # 获取已存在的 resume= 行的内容
        existing_resume=$(grep -o "resume=[^[:space:]]*" "/boot/loader/entries/frzr.conf")
        echo "existing resume: ${existing_resume}"
        
        # 如果现有的 resume= 行与 RESUME_CMD 不匹配，则进行替换
        if [ "${existing_resume}" != "${RESUME_CMD}" ]; then
        
            # 检查文件中是否已存在 resume_offset=，如果存在，则删除
            existing_resume_offset=$(grep -o "resume_offset=[^[:space:]]*" "/boot/loader/entries/frzr.conf")
            sed -i "s/${existing_resume_offset} //" "/boot/loader/entries/frzr.conf"

            sed -i "s/${existing_resume}/${RESUME_CMD}/" "/boot/loader/entries/frzr.conf"
            echo "Replaced existing RESUME_CMD in frzr.conf"
            
        else
            echo "RESUME_CMD already present and matches in frzr.conf"
        fi
    fi

else
    echo "frzr.conf not found"
fi
